plugins {
  id 'java'
  id 'application'
}

sourceSets {
  test{
    compileClasspath += project(':parser').sourceSets.testFixtures.compileClasspath
    runtimeClasspath += project(':parser').sourceSets.testFixtures.runtimeClasspath
    resources {
      srcDirs += [project(':parser').sourceSets.test.resources]
    }
  }
}

group 'net.dangmai'
version '1.0-SNAPSHOT'

applicationDefaultJvmArgs = [
  "--add-opens=java.base/java.lang=ALL-UNNAMED",
  "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED",
  "--add-opens=java.base/java.util=ALL-UNNAMED",
  "--add-opens=java.base/java.text=ALL-UNNAMED"
]
task httpStartScripts(type: CreateStartScripts) {
  mainClass.set('net.dangmai.serializer.server.HttpServer')
  applicationName = 'apex-ast-serializer-http'
  defaultJvmOpts = [
    "--add-opens=java.base/java.lang=ALL-UNNAMED",
    "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED",
    "--add-opens=java.base/java.util=ALL-UNNAMED",
    "--add-opens=java.base/java.text=ALL-UNNAMED"
  ]
  classpath = startScripts.classpath
  outputDir = startScripts.outputDir
}

applicationDistribution.into("bin") {
  from(httpStartScripts)
  fileMode = 0755
}

applicationDistribution.from("build/typings") {
  into "typings"
}

mainClassName = 'net.dangmai.serializer.Apex'

sourceCompatibility = 1.11
targetCompatibility = 1.11

repositories {
  flatDir {
    dirs '../libs'
  }
  mavenCentral()
  maven { url "https://jitpack.io" }
  gradlePluginPortal()
}

run {
  standardInput = System.in
}

// By default Gradle embeds extremely long CLASSPATH,
// which may fail on Windows because of path length limitation.
// This issue happens on Prettier Apex: https://github.com/dangmai/prettier-plugin-apex/issues/645
// This workaround is from https://gist.github.com/jlmelville/2bfe9277e9e2c0ff79b6
tasks.withType(CreateStartScripts).each { task ->
  task.doLast {
    String text = task.windowsScript.text
    text = text.replaceFirst(/(set CLASSPATH=%APP_HOME%\\lib\\).*/, { "${it[1]}*" })
    task.windowsScript.write text
  }
}

tasks.withType(AbstractArchiveTask) {
  // By default, the result ZIP archive is not reproducible,
  // i.e. running `gradle clean distZip` at different times
  // leads to ZIP files that have different md5 sums.
  // This is a workaround to make it reproducible, from:
  // https://dzone.com/articles/reproducible-builds-in-java
  preserveFileTimestamps = false
  reproducibleFileOrder = true
}

distTar {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
distZip {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  archiveFileName = "${project.name}.zip"
}
// distZip.dependsOn generateTypeScript

// jar {
//   exclude('net/dangmai/types/**')
// }

ext {
  slf4jVersion = '2.0.7'
  jettyVersion = '11.0.15'
  jerseyVersion = '3.1.2'
}

dependencies {
  implementation project(':parser')
  testImplementation(testFixtures(project(":parser")))

  // https://mvnrepository.com/artifact/commons-cli/commons-cli
  implementation group: 'commons-cli', name: 'commons-cli', version: '1.5.0'

  // https://mvnrepository.com/artifact/commons-io/commons-io
  implementation group: 'commons-io', name: 'commons-io', version: '2.13.0'

  implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'
  implementation "org.slf4j:slf4j-api:${slf4jVersion}"
  implementation "org.slf4j:slf4j-simple:${slf4jVersion}"
  implementation "org.eclipse.jetty:jetty-server:${jettyVersion}"
  implementation "org.eclipse.jetty:jetty-servlet:${jettyVersion}"
  implementation "org.eclipse.jetty:jetty-servlets:${jettyVersion}"
  implementation "org.glassfish.jersey.core:jersey-server:${jerseyVersion}"
  implementation "org.glassfish.jersey.containers:jersey-container-servlet-core:${jerseyVersion}"
  implementation "org.glassfish.jersey.containers:jersey-container-jetty-http:${jerseyVersion}"
  implementation "org.glassfish.jersey.media:jersey-media-json-jackson:${jerseyVersion}"
  implementation "org.glassfish.jersey.inject:jersey-hk2:${jerseyVersion}"

  // https://mvnrepository.com/artifact/jakarta.activation/jakarta.activation-api
  implementation group: 'jakarta.activation', name: 'jakarta.activation-api', version: '2.1.2'

  // https://mvnrepository.com/artifact/org.glassfish.jaxb/jaxb-runtime
  implementation group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: '4.0.3'

  // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.9.3'
  testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.9.3'

  // https://mvnrepository.com/artifact/org.json/json
  testImplementation group: 'org.json', name: 'json', version: '20230618'
}

test {
  useJUnitPlatform()
}
